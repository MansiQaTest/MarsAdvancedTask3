{
	"info": {
		"_postman_id": "cf480ac8-0643-47b3-8433-eed08fee3944",
		"name": "UserApiTest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36242894"
	},
	"item": [
		{
			"name": "Positive Test",
			"item": [
				{
					"name": "Sign up",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"var responseSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"isSuccess\": { \"type\": \"boolean\" }\r",
									"        \r",
									"    },\r",
									"    \"required\": [\"isSuccess\" ]\r",
									"};\r",
									"\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(responseSchema);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.isSuccess).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random strings for first name, last name, and email\r",
									"const randomString = (length) => {\r",
									"    const characters = \"abcdefghijklmnopqrstuvwxyz\";\r",
									"    let result = \"\";\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"};\r",
									"\r",
									"// Generate random values\r",
									"const firstName = randomString(6);\r",
									"const lastName = randomString(6);\r",
									"const email = `${randomString(5)}.${randomString(5)}@mailinator.com`;\r",
									"\r",
									"// Set variables in Postman\r",
									"pm.environment.set(\"firstName\", firstName);\r",
									"pm.environment.set(\"lastName\", lastName);\r",
									"pm.environment.set(\"email\", email);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"{{firstName}}\",\r\n  \"lastName\": \"{{lastName}}\",\r\n  \"countryDialCode\": \"+64\",\r\n  \"mobilePhone\": \"797999\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"Qwerfdsa1@\",\r\n  \"terms\": true\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/authentication/authentication/signup",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"authentication",
								"authentication",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"isSuccess\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"token\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"token\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"expires\": {\r",
									"          \"type\": \"number\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"token\",\r",
									"        \"expires\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"isSuccess\",\r",
									"    \"token\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"if (jsonData.isSuccess) {\r",
									"    // Save the token to an environment variable\r",
									"    pm.environment.set(\"token\", jsonData.token.token);\r",
									"} else {\r",
									"    console.log(\"Login failed, no token to save.\");\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.isSuccess).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"const requestSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"rememberMe\": { \"type\": \"boolean\" },\r",
									"        \"email\": { \"type\": \"string\" },\r",
									"        \"password\": { \"type\": \"string\"}\r",
									"    },\r",
									"    \"required\": [ \"rememberMe\",\"email\",\"password\"]\r",
									"};\r",
									"\r",
									"const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"\r",
									"const validate = ajv.compile(requestSchema);\r",
									"const valid = validate(requestBody);\r",
									"\r",
									"if (!valid) {\r",
									"    console.log(\"❌ Request JSON Schema Validation Failed:\", validate.errors);\r",
									"    throw new Error(\"Request JSON Schema Validation Failed\");\r",
									"} else {\r",
									"    console.log(\"✅ Request JSON Schema Validation Passed\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rememberMe\": false,\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"Qwerfdsa1@\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/authentication/authentication/signin",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"authentication",
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdatePassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"var responseSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"success\": { \"type\": \"boolean\" },",
									"        \"message\": { \"type\": \"string\" }",
									"        ",
									"    },",
									"    \"required\": [\"success\",\"message\" ]",
									"};",
									"",
									"// Validate JSON Schema",
									"pm.test(\"Response matches schema\", function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"});",
									"",
									"pm.test(\"Check if success is true\", function () {",
									"    pm.expect(jsonData.success).to.be.true;",
									"    console.log(jsonData.message);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"const requestSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"oldPassword\": { \"type\": \"string\" },\r",
									"        \"newPassword\": { \"type\": \"string\" } \r",
									"    },\r",
									"    \"required\": [\"oldPassword\", \"newPassword\" ]\r",
									"};\r",
									"\r",
									"let requestBody = {};\r",
									"try {\r",
									"    requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"} catch (error) {\r",
									"    console.log(\"❌ Error parsing request body:\", error);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"oldPassword\": \"Qwerfdsa1@\",\r\n    \"newPassword\": \"Asdfrewq1@\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/authentication/authentication/updatePassword",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"authentication",
								"authentication",
								"updatePassword"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login After Update Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"var responseSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"isSuccess\": { \"type\": \"boolean\" }\r",
									"        \r",
									"    },\r",
									"    \"required\": [\"isSuccess\" ]\r",
									"};\r",
									"\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(responseSchema);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.isSuccess).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"const requestSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \r",
									"        \"email\": { \"type\": \"string\" },\r",
									"        \"password\": { \"type\": \"string\"}\r",
									"    },\r",
									"    \"required\": [\"email\",\"password\"]\r",
									"};\r",
									"\r",
									"const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"\r",
									"const validate = ajv.compile(requestSchema);\r",
									"const valid = validate(requestBody);\r",
									"\r",
									"if (!valid) {\r",
									"    console.log(\"❌ Request JSON Schema Validation Failed:\", validate.errors);\r",
									"    throw new Error(\"Request JSON Schema Validation Failed\");\r",
									"} else {\r",
									"    console.log(\"✅ Request JSON Schema Validation Passed\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"Asdfrewq1@\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/authentication/authentication/signin",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"authentication",
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Test",
			"item": [
				{
					"name": "Sign up without mandatory success false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"var responseSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"isSuccess\": { \"type\": \"boolean\" }\r",
									"        \r",
									"    },\r",
									"    \"required\": [\"isSuccess\" ]\r",
									"};\r",
									"\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(responseSchema);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if success is false\", function () {\r",
									"    pm.expect(jsonData.isSuccess).to.be.false;\r",
									"    console.log(jsonData.message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random strings for first name, last name, and email\r",
									"const randomString = (length) => {\r",
									"    const characters = \"abcdefghijklmnopqrstuvwxyz\";\r",
									"    let result = \"\";\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"};\r",
									"\r",
									"// Generate random values\r",
									"const firstName = randomString(6);\r",
									"const lastName = randomString(6);\r",
									"const email = `${randomString(5)}.${randomString(5)}@mailinator.com`;\r",
									"\r",
									"// Set variables in Postman\r",
									"pm.environment.set(\"firstName\", firstName);\r",
									"pm.environment.set(\"lastName\", lastName);\r",
									"pm.environment.set(\"email\", email);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"\",\r\n    \"lastName\": \"\",\r\n    \"countryDialCode\": \"\",\r\n    \"mobilePhone\": \"\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"Qwerfdsa1@\",\r\n    \"terms\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/authentication/authentication/signup",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"authentication",
								"authentication",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with invalid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"isSuccess\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"isSuccess\"    \r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"if (jsonData.isSuccess) {\r",
									"    // Save the token to an environment variable\r",
									"    pm.environment.set(\"token\", jsonData.token.token);\r",
									"} else {\r",
									"    console.log(\"Login failed, no token to save.\");\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Check if success is false\", function () {\r",
									"    pm.expect(jsonData.isSuccess).to.be.false;\r",
									"    console.log(jsonData.message);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"const requestSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \r",
									"        \"email\": { \"type\": \"string\" },\r",
									"        \"password\": { \"type\": \"string\"}\r",
									"    },\r",
									"    \"required\": [ \"email\",\"password\"]\r",
									"};\r",
									"\r",
									"const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"\r",
									"const validate = ajv.compile(requestSchema);\r",
									"const valid = validate(requestBody);\r",
									"\r",
									"if (!valid) {\r",
									"    console.log(\"❌ Request JSON Schema Validation Failed:\", validate.errors);\r",
									"    throw new Error(\"Request JSON Schema Validation Failed\");\r",
									"} else {\r",
									"    console.log(\"✅ Request JSON Schema Validation Passed\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"pass@\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/authentication/authentication/signin",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"authentication",
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdatePassword with invalid old password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"let jsonData = pm.response.json();",
									"var responseSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"success\": { \"type\": \"boolean\" },",
									"        \"message\": { \"type\": \"string\" }",
									"        ",
									"    },",
									"    \"required\": [\"success\",\"message\" ]",
									"};",
									"",
									"// Validate JSON Schema",
									"pm.test(\"Response matches schema\", function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"});",
									"",
									"pm.test(\"Check if success is false\", function () {",
									"    pm.expect(jsonData.success).to.be.false;",
									"    console.log(jsonData.message);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"const requestSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"oldPassword\": { \"type\": \"string\" },\r",
									"        \"newPassword\": { \"type\": \"string\" } \r",
									"    },\r",
									"    \"required\": [\"oldPassword\", \"newPassword\" ]\r",
									"};\r",
									"\r",
									"let requestBody = {};\r",
									"try {\r",
									"    requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"} catch (error) {\r",
									"    console.log(\"❌ Error parsing request body:\", error);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"oldPassword\": \"hghgh@\",\r\n    \"newPassword\": \"Asdfrewq1@\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/authentication/authentication/updatePassword",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"authentication",
								"authentication",
								"updatePassword"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}