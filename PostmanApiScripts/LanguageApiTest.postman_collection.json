{
	"info": {
		"_postman_id": "36a30317-7e4f-4674-944f-98105396b4cc",
		"name": "LanguageApiTest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36242894"
	},
	"item": [
		{
			"name": "Positive Test",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"isSuccess\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"token\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"token\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"expires\": {\r",
									"          \"type\": \"number\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"token\",\r",
									"        \"expires\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"isSuccess\",\r",
									"    \"token\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"if (jsonData.isSuccess) {\r",
									"    // Save the token to an environment variable\r",
									"    pm.environment.set(\"token\", jsonData.token.token);\r",
									"} else {\r",
									"    console.log(\"Login failed, no token to save.\");\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.isSuccess).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"const requestSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"rememberMe\": { \"type\": \"boolean\" },\r",
									"        \"email\": { \"type\": \"string\" },\r",
									"        \"password\": { \"type\": \"string\"}\r",
									"    },\r",
									"    \"required\": [ \"rememberMe\",\"email\",\"password\"]\r",
									"};\r",
									"\r",
									"const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"\r",
									"const validate = ajv.compile(requestSchema);\r",
									"const valid = validate(requestBody);\r",
									"\r",
									"if (!valid) {\r",
									"    console.log(\"❌ Request JSON Schema Validation Failed:\", validate.errors);\r",
									"    throw new Error(\"Request JSON Schema Validation Failed\");\r",
									"} else {\r",
									"    console.log(\"✅ Request JSON Schema Validation Passed\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rememberMe\": false,\r\n    \"email\": \"{{username}}\",\r\n    \"password\": \"Qwerfdsa1@\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/authentication/authentication/signin",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"authentication",
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"// JSON Schema Validation using tv4 (Postman built-in)\r",
									"const responseSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"success\": { \"type\": \"boolean\" },\r",
									"        \"id\": { \"type\": \"string\", \"pattern\": \"^[a-f0-9]{24}$\" }\r",
									"    },\r",
									"    \"required\": [\"success\", \"id\"]\r",
									"};\r",
									"\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.expect(tv4.validate(jsonData, responseSchema), tv4.error).to.be.true;\r",
									"});\r",
									"\r",
									"if (jsonData.success) {\r",
									"    // Save the id to an environment variable\r",
									"    pm.environment.set(\"id\", jsonData.id);\r",
									"} else {\r",
									"    console.log(\"Request failed, no ID to save.\");\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.success).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"const requestSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"name\": { \"type\": \"string\" },\r",
									"        \"level\": { \"type\": \"string\" } \r",
									"    },\r",
									"    \"required\": [\"name\", \"level\", ]\r",
									"};\r",
									"\r",
									"let requestBody = {};\r",
									"try {\r",
									"    requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"} catch (error) {\r",
									"    console.log(\"❌ Error parsing request body:\", error);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\t\r\n{\r\n  \"name\": \"English\",\r\n  \"level\": \"Beginner\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl2}}/profile/profile/addLanguage",
							"host": [
								"{{baseurl2}}"
							],
							"path": [
								"profile",
								"profile",
								"addLanguage"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get response JSON\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// JSON Schema Validation using tv4 (Postman built-in)\r",
									"const responseSchema = {\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"personLanguageId\": { \"type\": \"string\", \"pattern\": \"^[a-f0-9]{24}$\" },\r",
									"            \"language\": { \"type\": \"string\" },\r",
									"            \"languageLevel\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"personLanguageId\", \"language\", \"languageLevel\"]\r",
									"    }\r",
									"};\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.expect(tv4.validate(jsonData, responseSchema), tv4.error).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl2}}/profile/profile/getLanguage",
							"host": [
								"{{baseurl2}}"
							],
							"path": [
								"profile",
								"profile",
								"getLanguage"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"const responseSchema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"success\": { \"type\": \"boolean\"}\r",
									"        },\r",
									"        \"required\": [\"success\"]\r",
									"    };\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.expect(tv4.validate(jsonData, responseSchema), tv4.error).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.success).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {    \r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"id\": { \"type\": \"string\", \"pattern\": \"^[a-f0-9]{24}$\" },\r",
									"            \"name\": { \"type\": \"string\" },\r",
									"            \"level\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"id\", \"certificationName\", \"certificationFrom\", \"certificationYear\"]\r",
									"    };\r",
									"    \r",
									"let requestBody = {};\r",
									"try {\r",
									"    requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"} catch (error) {\r",
									"    console.log(\"❌ Error parsing request body:\", error);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{id}}\",\r\n    \"name\": \"English\",\r\n    \"level\": \"Conversational\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl2}}/profile/profile/updateLanguage",
							"host": [
								"{{baseurl2}}"
							],
							"path": [
								"profile",
								"profile",
								"updateLanguage"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Get response JSON\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// JSON Schema Validation using tv4 (Postman built-in)\r",
									"const responseSchema = {\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"personLanguageId\": { \"type\": \"string\", \"pattern\": \"^[a-f0-9]{24}$\" },\r",
									"            \"language\": { \"type\": \"string\" },\r",
									"            \"languageLevel\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"personLanguageId\", \"language\", \"languageLevel\"]\r",
									"    }\r",
									"};\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.expect(tv4.validate(jsonData, responseSchema), tv4.error).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl2}}/profile/profile/getLanguage",
							"host": [
								"{{baseurl2}}"
							],
							"path": [
								"profile",
								"profile",
								"getLanguage"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"const responseSchema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"success\": { \"type\": \"boolean\"},\r",
									"            \"language\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"success\", \"language\"]\r",
									"    };\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.expect(tv4.validate(jsonData, responseSchema), tv4.error).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.success).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const responseSchema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"id\": { \"type\": \"string\", \"pattern\": \"^[a-f0-9]{24}$\"}\r",
									"        },\r",
									"        \"required\": [\"id\"]\r",
									"    };\r",
									"    \r",
									"let requestBody = {};\r",
									"try {\r",
									"    requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"} catch (error) {\r",
									"    console.log(\"❌ Error parsing request body:\", error);\r",
									"}  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":\"{{id}}\"}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl2}}/profile/profile/deleteLanguage",
							"host": [
								"{{baseurl2}}"
							],
							"path": [
								"profile",
								"profile",
								"deleteLanguage"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Get response JSON\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// JSON Schema Validation using tv4 (Postman built-in)\r",
									"const responseSchema = {\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"personLanguageId\": { \"type\": \"string\", \"pattern\": \"^[a-f0-9]{24}$\" },\r",
									"            \"language\": { \"type\": \"string\" },\r",
									"            \"languageLevel\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"personLanguageId\", \"language\", \"languageLevel\"]\r",
									"    }\r",
									"};\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.expect(tv4.validate(jsonData, responseSchema), tv4.error).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl2}}/profile/profile/getLanguage",
							"host": [
								"{{baseurl2}}"
							],
							"path": [
								"profile",
								"profile",
								"getLanguage"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Test",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"isSuccess\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"token\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"token\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"expires\": {\r",
									"          \"type\": \"number\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"token\",\r",
									"        \"expires\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"isSuccess\",\r",
									"    \"token\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"if (jsonData.isSuccess) {\r",
									"    // Save the token to an environment variable\r",
									"    pm.environment.set(\"token\", jsonData.token.token);\r",
									"} else {\r",
									"    console.log(\"Login failed, no token to save.\");\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.isSuccess).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"const requestSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"rememberMe\": { \"type\": \"boolean\" },\r",
									"        \"email\": { \"type\": \"string\" },\r",
									"        \"password\": { \"type\": \"string\"}\r",
									"    },\r",
									"    \"required\": [ \"rememberMe\",\"email\",\"password\"]\r",
									"};\r",
									"\r",
									"const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"\r",
									"const validate = ajv.compile(requestSchema);\r",
									"const valid = validate(requestBody);\r",
									"\r",
									"if (!valid) {\r",
									"    console.log(\"❌ Request JSON Schema Validation Failed:\", validate.errors);\r",
									"    throw new Error(\"Request JSON Schema Validation Failed\");\r",
									"} else {\r",
									"    console.log(\"✅ Request JSON Schema Validation Passed\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rememberMe\": false,\r\n    \"email\": \"{{username}}\",\r\n    \"password\": \"Qwerfdsa1@\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/authentication/authentication/signin",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"authentication",
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create language with invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"const responseSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"success\": { \"type\": \"boolean\" },\r",
									"        \"id\": { \"type\": \"string\", \"pattern\": \"^[a-f0-9]{24}$\" }\r",
									"    },\r",
									"    \"required\": [\"success\", \"id\"]\r",
									"};\r",
									"\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.expect(tv4.validate(jsonData, responseSchema), tv4.error).to.be.true;\r",
									"});\r",
									"\r",
									"if (jsonData.success) {\r",
									"    // Save the id to an environment variable\r",
									"    pm.environment.set(\"id\", jsonData.id);\r",
									"} else {\r",
									"    console.log(\"Request failed, no ID to save.\");\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Check if success is false\", function () {\r",
									"    pm.expect(jsonData.success).to.be.false;\r",
									"    console.log(jsonData.message);\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"const requestSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"name\": { \"type\": \"string\" },\r",
									"        \"level\": { \"type\": \"string\" } \r",
									"    },\r",
									"    \"required\": [\"name\", \"level\", ]\r",
									"};\r",
									"\r",
									"let requestBody = {};\r",
									"try {\r",
									"    requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"} catch (error) {\r",
									"    console.log(\"❌ Error parsing request body:\", error);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\t\r\n{\r\n  \"name\": \"%%%%\",\r\n  \"level\": \"\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl2}}/profile/profile/addLanguage",
							"host": [
								"{{baseurl2}}"
							],
							"path": [
								"profile",
								"profile",
								"addLanguage"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get response JSON\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// JSON Schema Validation using tv4 (Postman built-in)\r",
									"const responseSchema = {\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"personLanguageId\": { \"type\": \"string\", \"pattern\": \"^[a-f0-9]{24}$\" },\r",
									"            \"language\": { \"type\": \"string\" },\r",
									"            \"languageLevel\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"personLanguageId\", \"language\", \"languageLevel\"]\r",
									"    }\r",
									"};\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.expect(tv4.validate(jsonData, responseSchema), tv4.error).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl2}}/profile/profile/getLanguage",
							"host": [
								"{{baseurl2}}"
							],
							"path": [
								"profile",
								"profile",
								"getLanguage"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Language with invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"const responseSchema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"success\": { \"type\": \"boolean\"}\r",
									"        },\r",
									"        \"required\": [\"success\"]\r",
									"    };\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.expect(tv4.validate(jsonData, responseSchema), tv4.error).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Check if success is false\", function () {\r",
									"    pm.expect(jsonData.success).to.be.false;\r",
									"    console.log(jsonData.message);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {    \r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"id\": { \"type\": \"string\", \"pattern\": \"^[a-f0-9]{24}$\" },\r",
									"            \"name\": { \"type\": \"string\" },\r",
									"            \"level\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"id\", \"certificationName\", \"certificationFrom\", \"certificationYear\"]\r",
									"    };\r",
									"    \r",
									"let requestBody = {};\r",
									"try {\r",
									"    requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"} catch (error) {\r",
									"    console.log(\"❌ Error parsing request body:\", error);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{id}}\",\r\n    \"name\": \"hjhjk\",\r\n    \"level\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl2}}/profile/profile/updateLanguage",
							"host": [
								"{{baseurl2}}"
							],
							"path": [
								"profile",
								"profile",
								"updateLanguage"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get response JSON\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// JSON Schema Validation using tv4 (Postman built-in)\r",
									"const responseSchema = {\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"personLanguageId\": { \"type\": \"string\", \"pattern\": \"^[a-f0-9]{24}$\" },\r",
									"            \"language\": { \"type\": \"string\" },\r",
									"            \"languageLevel\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"personLanguageId\", \"language\", \"languageLevel\"]\r",
									"    }\r",
									"};\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.expect(tv4.validate(jsonData, responseSchema), tv4.error).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl2}}/profile/profile/getLanguage",
							"host": [
								"{{baseurl2}}"
							],
							"path": [
								"profile",
								"profile",
								"getLanguage"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"const responseSchema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"success\": { \"type\": \"boolean\"},\r",
									"            \"language\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"success\"]\r",
									"    };\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.expect(tv4.validate(jsonData, responseSchema), tv4.error).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.success).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const responseSchema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"id\": { \"type\": \"string\", \"pattern\": \"^[a-f0-9]{24}$\"}\r",
									"        },\r",
									"        \"required\": [\"id\"]\r",
									"    };\r",
									"    \r",
									"let requestBody = {};\r",
									"try {\r",
									"    requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"} catch (error) {\r",
									"    console.log(\"❌ Error parsing request body:\", error);\r",
									"}  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":\"{{id}}\"}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl2}}/profile/profile/deleteLanguage",
							"host": [
								"{{baseurl2}}"
							],
							"path": [
								"profile",
								"profile",
								"deleteLanguage"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get response JSON\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// JSON Schema Validation using tv4 (Postman built-in)\r",
									"const responseSchema = {\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"personLanguageId\": { \"type\": \"string\", \"pattern\": \"^[a-f0-9]{24}$\" },\r",
									"            \"language\": { \"type\": \"string\" },\r",
									"            \"languageLevel\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"personLanguageId\", \"language\", \"languageLevel\"]\r",
									"    }\r",
									"};\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.expect(tv4.validate(jsonData, responseSchema), tv4.error).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl2}}/profile/profile/getLanguage",
							"host": [
								"{{baseurl2}}"
							],
							"path": [
								"profile",
								"profile",
								"getLanguage"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}