{
	"info": {
		"_postman_id": "69ece31d-a675-486d-a02f-442333421ae6",
		"name": "ListingApiTest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36242894"
	},
	"item": [
		{
			"name": "Positive Test",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"isSuccess\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"token\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"token\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"expires\": {\r",
									"          \"type\": \"number\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"token\",\r",
									"        \"expires\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"isSuccess\",\r",
									"    \"token\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"if (jsonData.isSuccess) {\r",
									"    // Save the token to an environment variable\r",
									"    pm.environment.set(\"token\", jsonData.token.token);\r",
									"} else {\r",
									"    console.log(\"Login failed, no token to save.\");\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.isSuccess).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"const requestSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"rememberMe\": { \"type\": \"boolean\" },\r",
									"        \"email\": { \"type\": \"string\" },\r",
									"        \"password\": { \"type\": \"string\"}\r",
									"    },\r",
									"    \"required\": [ \"rememberMe\",\"email\",\"password\"]\r",
									"};\r",
									"\r",
									"const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"\r",
									"const validate = ajv.compile(requestSchema);\r",
									"const valid = validate(requestBody);\r",
									"\r",
									"if (!valid) {\r",
									"    console.log(\"❌ Request JSON Schema Validation Failed:\", validate.errors);\r",
									"    throw new Error(\"Request JSON Schema Validation Failed\");\r",
									"} else {\r",
									"    console.log(\"✅ Request JSON Schema Validation Passed\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rememberMe\": false,\r\n    \"email\": \"{{username}}\",\r\n    \"password\": \"Qwerfdsa1@\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/authentication/authentication/signin",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"authentication",
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Listing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"var responseSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"success\": { \"type\": \"boolean\" },\r",
									"        \"id\": { \"type\": \"string\", \"pattern\": \"^[a-f0-9]{24}$\" },\r",
									"        \"editFlag\": { \"type\": \"boolean\" }\r",
									"        \r",
									"    },\r",
									"    \"required\": [\"success\",\"id\",\"editFlag\" ]\r",
									"};\r",
									"\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(responseSchema);\r",
									"});\r",
									"\r",
									"if (jsonData.success) {\r",
									"    // Save the id to an environment variable\r",
									"    pm.environment.set(\"id\", jsonData.id);\r",
									"} else {\r",
									"    console.log(\"Request failed, no ID to save.\");\r",
									"}\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.success).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"title\": { \"type\": \"string\" },\r",
									"        \"description\": { \"type\": \"string\" },\r",
									"        \"categoryId\": { \"type\": \"string\" },\r",
									"        \"subcategoryId\": { \"type\": \"string\" },\r",
									"        \"tags\": { \r",
									"            \"type\": \"array\", \r",
									"            \"items\": { \r",
									"                \"type\": \"object\", \r",
									"                \"properties\": { \r",
									"                    \"id\": { \"type\": \"string\" }, \r",
									"                    \"text\": { \"type\": \"string\" } \r",
									"                }, \r",
									"                \"required\": [\"id\", \"text\"] \r",
									"            } \r",
									"        },\r",
									"        \"serviceType\": { \"type\": \"integer\" },\r",
									"        \"locationType\": { \"type\": \"integer\" },\r",
									"        \"availability\": { \r",
									"            \"type\": \"object\", \r",
									"            \"properties\": { \r",
									"                \"startDate\": { \"type\": \"string\" },\r",
									"                \"endDate\": { \"type\": \"string\" },\r",
									"                \"dayEntries\": { \r",
									"                    \"type\": \"array\", \r",
									"                    \"items\": { \r",
									"                        \"type\": \"object\", \r",
									"                        \"properties\": { \r",
									"                            \"StartTime\": { \"type\": \"string\" }, \r",
									"                            \"EndTime\": { \"type\": \"string\" }, \r",
									"                            \"Available\": { \"type\": \"boolean\" } \r",
									"                        }, \r",
									"                        \"required\": [\"StartTime\", \"EndTime\", \"Available\"] \r",
									"                    } \r",
									"                } \r",
									"            }, \r",
									"            \"required\": [\"startDate\", \"endDate\", \"dayEntries\"] \r",
									"        },\r",
									"        \"skillTrade\": { \r",
									"            \"type\": \"array\", \r",
									"            \"items\": { \r",
									"                \"type\": \"object\", \r",
									"                \"properties\": { \r",
									"                    \"id\": { \"type\": \"string\" }, \r",
									"                    \"text\": { \"type\": \"string\" } \r",
									"                }, \r",
									"                \"required\": [\"id\", \"text\"] \r",
									"            } \r",
									"        },\r",
									"        \"isTradable\": { \"type\": \"boolean\" },\r",
									"        \"charge\": { \"type\": \"integer\" },\r",
									"        \"credentials\": { \"type\": \"boolean\" },\r",
									"        \"isActive\": { \"type\": \"boolean\" }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"title\", \"description\", \"categoryId\", \"subcategoryId\", \"tags\", \"serviceType\",\r",
									"        \"locationType\", \"availability\", \"skillTrade\", \"isTradable\", \"charge\", \r",
									"        \"credentials\", \"isActive\"\r",
									"    ]\r",
									"};\r",
									"let requestBody = {};\r",
									"try {\r",
									"    requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"} catch (error) {\r",
									"    console.log(\"❌ Error parsing request body:\", error);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"QA\",\r\n    \"description\": \"Test\",\r\n    \"categoryId\": \"6\",\r\n    \"subcategoryId\": \"4\",\r\n    \"tags\": [\r\n        {\r\n            \"id\": \"QA\",\r\n            \"text\": \"QA\"\r\n        }\r\n    ],\r\n    \"serviceType\": 0,\r\n    \"locationType\": 1,\r\n    \"availability\": {\r\n        \"startDate\": \"2024-12-04\",\r\n        \"endDate\": \"\",\r\n        \"dayEntries\": [\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            }\r\n        ]\r\n    },\r\n    \"skillTrade\": [\r\n        {\r\n            \"id\": \"QA\",\r\n            \"text\": \"QA\"\r\n        }\r\n    ],\r\n    \"isTradable\": true,\r\n    \"charge\": 0,\r\n    \"credentials\": true,\r\n    \"isActive\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl3}}/listing/listing/addListing",
							"host": [
								"{{baseurl3}}"
							],
							"path": [
								"listing",
								"listing",
								"addListing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"var responseSchema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"success\": { \"type\": \"boolean\"},\r",
									"            \"title\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"success\", \"title\"]\r",
									"    };\r",
									"\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(responseSchema);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.success).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const responseSchema = {\r",
									"        \"type\": \"string\"\r",
									"    };\r",
									"    \r",
									"let requestBody = {};\r",
									"try {\r",
									"    requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"} catch (error) {\r",
									"    console.log(\"❌ Error parsing request body:\", error);\r",
									"}  \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"{{id}}\"\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl3}}/listing/listing/deleteServiceListing",
							"host": [
								"{{baseurl3}}"
							],
							"path": [
								"listing",
								"listing",
								"deleteServiceListing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"var responseSchema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"success\": { \"type\": \"boolean\"},\r",
									"            \"balance\": { \"type\": \"integer\" }\r",
									"        },\r",
									"        \"required\": [\"success\", \"balance\"]\r",
									"    };\r",
									"\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(responseSchema);\r",
									"});\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.success).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl3}}/listing/listing/getBalance",
							"host": [
								"{{baseurl3}}"
							],
							"path": [
								"listing",
								"listing",
								"getBalance"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"var responseSchema = {\r",
									"       \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"success\": { \"type\": \"boolean\" },\r",
									"        \"categories\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"id\": { \"type\": [\"string\", \"null\"] },\r",
									"                    \"value\": { \"type\": \"string\" },\r",
									"                    \"name\": { \"type\": \"string\" },\r",
									"                    \"subcategory\": {\r",
									"                        \"type\": \"array\",\r",
									"                        \"items\": {\r",
									"                            \"type\": \"object\",\r",
									"                            \"properties\": {\r",
									"                                \"id\": { \"type\": [\"string\", \"null\"] },\r",
									"                                \"value\": { \"type\": \"string\" },\r",
									"                                \"name\": { \"type\": \"string\" },\r",
									"                                \"isDeleted\": { \"type\": \"boolean\" }\r",
									"                            },\r",
									"                            \"required\": [\"value\", \"name\", \"isDeleted\"]\r",
									"                        }\r",
									"                    },\r",
									"                    \"isDeleted\": { \"type\": \"boolean\" }\r",
									"                },\r",
									"                \"required\": [\"value\", \"name\", \"subcategory\", \"isDeleted\"]\r",
									"            }\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"success\", \"categories\"]\r",
									"    };\r",
									"\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(responseSchema);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.success).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl3}}/listing/listing/getCategories",
							"host": [
								"{{baseurl3}}"
							],
							"path": [
								"listing",
								"listing",
								"getCategories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Sent Requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"var responseSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"success\": { \"type\": \"boolean\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"id\": { \"type\": \"string\" },\r",
									"                    \"senderId\": { \"type\": \"string\" },\r",
									"                    \"senderName\": { \"type\": \"string\" },\r",
									"                    \"recipientId\": { \"type\": \"string\" },\r",
									"                    \"recipientName\": { \"type\": \"string\" },\r",
									"                    \"listingId\": { \"type\": \"string\" },\r",
									"                    \"totalHours\": { \"type\": \"number\" },\r",
									"                    \"totalAmount\": { \"type\": \"number\" },\r",
									"                    \"status\": { \"type\": \"integer\" },\r",
									"                    \"isViewed\": { \"type\": \"boolean\" },\r",
									"                    \"isCompletedBySender\": { \"type\": \"boolean\" },\r",
									"                    \"isCompletedBySeller\": { \"type\": \"boolean\" },\r",
									"                    \"category\": { \"type\": [\"string\", \"null\"] },\r",
									"                    \"categoryId\": { \"type\": \"integer\" },\r",
									"                    \"title\": { \"type\": \"string\" },\r",
									"                    \"message\": { \"type\": \"string\" },\r",
									"                    \"senderLastName\": { \"type\": [\"string\", \"null\"] },\r",
									"                    \"senderCity\": { \"type\": [\"string\", \"null\"] },\r",
									"                    \"senderCountry\": { \"type\": [\"string\", \"null\"] },\r",
									"                    \"createdOn\": { \"type\": \"string\" },\r",
									"                    \"updatedOn\": { \"type\": \"string\" },\r",
									"                    \"isTradable\": { \"type\": \"boolean\" }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"id\",\r",
									"                    \"senderId\",\r",
									"                    \"senderName\",\r",
									"                    \"recipientId\",\r",
									"                    \"recipientName\",\r",
									"                    \"listingId\",\r",
									"                    \"totalHours\",\r",
									"                    \"totalAmount\",\r",
									"                    \"status\",\r",
									"                    \"isViewed\",\r",
									"                    \"isCompletedBySender\",\r",
									"                    \"isCompletedBySeller\",\r",
									"                    \"categoryId\",\r",
									"                    \"title\",\r",
									"                    \"message\",\r",
									"                    \"createdOn\",\r",
									"                    \"updatedOn\",\r",
									"                    \"isTradable\"\r",
									"                ]\r",
									"            }\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"};\r",
									"\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(responseSchema);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.success).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl3}}/listing/listing/getSentRequests",
							"host": [
								"{{baseurl3}}"
							],
							"path": [
								"listing",
								"listing",
								"getSentRequests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Toggle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"let jsonData = pm.response.json();\r",
									"var responseSchema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"success\": { \"type\": \"boolean\"},\r",
									"            \"active\": { \"type\": \"boolean\" }\r",
									"        },\r",
									"        \"required\": [\"success\", \"active\"]\r",
									"    };\r",
									"\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(responseSchema);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.success).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const responseSchema = {\r",
									"        \"type\": \"string\"\r",
									"    };\r",
									"    \r",
									"let requestBody = {};\r",
									"try {\r",
									"    requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"} catch (error) {\r",
									"    console.log(\"❌ Error parsing request body:\", error);\r",
									"}  \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"{{id}}\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl3}}/listing/listing/toggleIsActive",
							"host": [
								"{{baseurl3}}"
							],
							"path": [
								"listing",
								"listing",
								"toggleIsActive"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Listing for further test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"var responseSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"success\": { \"type\": \"boolean\" },\r",
									"        \"id\": { \"type\": \"string\", \"pattern\": \"^[a-f0-9]{24}$\" },\r",
									"        \"editFlag\": { \"type\": \"boolean\" }\r",
									"        \r",
									"    },\r",
									"    \"required\": [\"success\",\"id\",\"editFlag\" ]\r",
									"};\r",
									"\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(responseSchema);\r",
									"});\r",
									"\r",
									"if (jsonData.success) {\r",
									"    // Save the id to an environment variable\r",
									"    pm.environment.set(\"id\", jsonData.id);\r",
									"} else {\r",
									"    console.log(\"Request failed, no ID to save.\");\r",
									"}\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.success).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"title\": { \"type\": \"string\" },\r",
									"        \"description\": { \"type\": \"string\" },\r",
									"        \"categoryId\": { \"type\": \"string\" },\r",
									"        \"subcategoryId\": { \"type\": \"string\" },\r",
									"        \"tags\": { \r",
									"            \"type\": \"array\", \r",
									"            \"items\": { \r",
									"                \"type\": \"object\", \r",
									"                \"properties\": { \r",
									"                    \"id\": { \"type\": \"string\" }, \r",
									"                    \"text\": { \"type\": \"string\" } \r",
									"                }, \r",
									"                \"required\": [\"id\", \"text\"] \r",
									"            } \r",
									"        },\r",
									"        \"serviceType\": { \"type\": \"integer\" },\r",
									"        \"locationType\": { \"type\": \"integer\" },\r",
									"        \"availability\": { \r",
									"            \"type\": \"object\", \r",
									"            \"properties\": { \r",
									"                \"startDate\": { \"type\": \"string\" },\r",
									"                \"endDate\": { \"type\": \"string\" },\r",
									"                \"dayEntries\": { \r",
									"                    \"type\": \"array\", \r",
									"                    \"items\": { \r",
									"                        \"type\": \"object\", \r",
									"                        \"properties\": { \r",
									"                            \"StartTime\": { \"type\": \"string\" }, \r",
									"                            \"EndTime\": { \"type\": \"string\" }, \r",
									"                            \"Available\": { \"type\": \"boolean\" } \r",
									"                        }, \r",
									"                        \"required\": [\"StartTime\", \"EndTime\", \"Available\"] \r",
									"                    } \r",
									"                } \r",
									"            }, \r",
									"            \"required\": [\"startDate\", \"endDate\", \"dayEntries\"] \r",
									"        },\r",
									"        \"skillTrade\": { \r",
									"            \"type\": \"array\", \r",
									"            \"items\": { \r",
									"                \"type\": \"object\", \r",
									"                \"properties\": { \r",
									"                    \"id\": { \"type\": \"string\" }, \r",
									"                    \"text\": { \"type\": \"string\" } \r",
									"                }, \r",
									"                \"required\": [\"id\", \"text\"] \r",
									"            } \r",
									"        },\r",
									"        \"isTradable\": { \"type\": \"boolean\" },\r",
									"        \"charge\": { \"type\": \"integer\" },\r",
									"        \"credentials\": { \"type\": \"boolean\" },\r",
									"        \"isActive\": { \"type\": \"boolean\" }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"title\", \"description\", \"categoryId\", \"subcategoryId\", \"tags\", \"serviceType\",\r",
									"        \"locationType\", \"availability\", \"skillTrade\", \"isTradable\", \"charge\", \r",
									"        \"credentials\", \"isActive\"\r",
									"    ]\r",
									"};\r",
									"let requestBody = {};\r",
									"try {\r",
									"    requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"} catch (error) {\r",
									"    console.log(\"❌ Error parsing request body:\", error);\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"QA\",\r\n    \"description\": \"Test\",\r\n    \"categoryId\": \"6\",\r\n    \"subcategoryId\": \"4\",\r\n    \"tags\": [\r\n        {\r\n            \"id\": \"QA\",\r\n            \"text\": \"QA\"\r\n        }\r\n    ],\r\n    \"serviceType\": 0,\r\n    \"locationType\": 1,\r\n    \"availability\": {\r\n        \"startDate\": \"2024-12-04\",\r\n        \"endDate\": \"\",\r\n        \"dayEntries\": [\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            }\r\n        ]\r\n    },\r\n    \"skillTrade\": [\r\n        {\r\n            \"id\": \"QA\",\r\n            \"text\": \"QA\"\r\n        }\r\n    ],\r\n    \"isTradable\": true,\r\n    \"charge\": 0,\r\n    \"credentials\": true,\r\n    \"isActive\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl3}}/listing/listing/addListing",
							"host": [
								"{{baseurl3}}"
							],
							"path": [
								"listing",
								"listing",
								"addListing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login as sender",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"isSuccess\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"token\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"token\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"expires\": {\r",
									"          \"type\": \"number\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"token\",\r",
									"        \"expires\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"isSuccess\",\r",
									"    \"token\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"if (jsonData.isSuccess) {\r",
									"    // Save the token to an environment variable\r",
									"    pm.environment.set(\"token\", jsonData.token.token);\r",
									"} else {\r",
									"    console.log(\"Login failed, no token to save.\");\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.isSuccess).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"const requestSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"rememberMe\": { \"type\": \"boolean\" },\r",
									"        \"email\": { \"type\": \"string\" },\r",
									"        \"password\": { \"type\": \"string\"}\r",
									"    },\r",
									"    \"required\": [ \"rememberMe\",\"email\",\"password\"]\r",
									"};\r",
									"\r",
									"const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"\r",
									"const validate = ajv.compile(requestSchema);\r",
									"const valid = validate(requestBody);\r",
									"\r",
									"if (!valid) {\r",
									"    console.log(\"❌ Request JSON Schema Validation Failed:\", validate.errors);\r",
									"    throw new Error(\"Request JSON Schema Validation Failed\");\r",
									"} else {\r",
									"    console.log(\"✅ Request JSON Schema Validation Passed\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rememberMe\": false,\r\n    \"email\": \"mansisolanki1995@gmail.com\",\r\n    \"password\": \"Qwerfdsa1@\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/authentication/authentication/signin",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"authentication",
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Listings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"var responseSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"success\": { \"type\": \"boolean\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"id\": { \"type\": \"string\" },\r",
									"                    \"sellerId\": { \"type\": \"string\" },\r",
									"                    \"sellerName\": { \"type\": \"string\" },\r",
									"                    \"sellerFirstName\": { \"type\": [\"string\", \"null\"] },\r",
									"                    \"sellerLastName\": { \"type\": [\"string\", \"null\"] },\r",
									"                    \"profilePictureId\": { \"type\": [\"string\", \"null\"] },\r",
									"                    \"samplePictureId\": { \"type\": [\"string\", \"null\"] },\r",
									"                    \"photoSrc\": { \"type\": [\"string\", \"null\"] },\r",
									"                    \"samplePhotoSrc\": { \"type\": \"string\" },\r",
									"                    \"charge\": { \"type\": \"number\" },\r",
									"                    \"title\": { \"type\": \"string\" },\r",
									"                    \"description\": { \"type\": \"string\" },\r",
									"                    \"categoryId\": { \"type\": \"integer\" },\r",
									"                    \"subcategoryId\": { \"type\": \"integer\" },\r",
									"                    \"serviceType\": { \"type\": \"integer\" },\r",
									"                    \"isTradable\": { \"type\": \"boolean\" },\r",
									"                    \"skillTrade\": {\r",
									"                        \"type\": \"array\",\r",
									"                        \"items\": {\r",
									"                            \"type\": \"object\",\r",
									"                            \"properties\": {\r",
									"                                \"id\": { \"type\": \"string\" },\r",
									"                                \"text\": { \"type\": \"string\" }\r",
									"                            },\r",
									"                            \"required\": [\"id\", \"text\"]\r",
									"                        }\r",
									"                    },\r",
									"                    \"locationType\": { \"type\": \"integer\" },\r",
									"                    \"ratings\": {\r",
									"                        \"type\": [\"array\", \"null\"],\r",
									"                        \"items\": {\r",
									"                            \"type\": \"object\",\r",
									"                            \"properties\": {\r",
									"                                \"id\": { \"type\": \"string\" },\r",
									"                                \"raterId\": { \"type\": \"string\" },\r",
									"                                \"communicationRating\": { \"type\": \"integer\" },\r",
									"                                \"communicationRatingTokens\": { \"type\": \"integer\" },\r",
									"                                \"serviceRating\": { \"type\": \"integer\" },\r",
									"                                \"serviceRatingTokens\": { \"type\": \"integer\" },\r",
									"                                \"recommendRating\": { \"type\": \"integer\" },\r",
									"                                \"recommendRatingTokens\": { \"type\": \"integer\" },\r",
									"                                \"lastRatedOn\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
									"                                \"createdOn\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
									"                                \"tokensExpireOn\": { \"type\": \"string\", \"format\": \"date-time\" }\r",
									"                            },\r",
									"                            \"required\": [\r",
									"                                \"id\", \"raterId\", \"communicationRating\", \"communicationRatingTokens\", \"serviceRating\", \"serviceRatingTokens\",\r",
									"                                \"recommendRating\", \"recommendRatingTokens\", \"lastRatedOn\", \"createdOn\", \"tokensExpireOn\"\r",
									"                            ]\r",
									"                        }\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"id\", \"sellerId\", \"sellerName\", \"photoSrc\", \"samplePhotoSrc\", \"charge\", \"title\", \"description\", \"categoryId\", \r",
									"                    \"subcategoryId\", \"serviceType\", \"isTradable\", \"skillTrade\", \"locationType\"\r",
									"                ]\r",
									"            }\r",
									"        },\r",
									"        \"totalCount\": { \"type\": \"integer\" }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\", \"totalCount\"]\r",
									"};\r",
									"\r",
									"\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(responseSchema);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.success).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"sortPagination\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"limit\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"offset\": {\r",
									"                    \"type\": \"integer\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\"limit\", \"offset\"]\r",
									"        },\r",
									"        \"terms\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"categoryIndex\": { \"type\": \"null\" },\r",
									"                \"searchString\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"subcategoryIndex\": { \"type\": \"null\" },\r",
									"                \"uId\": { \"type\": \"null\" }\r",
									"            },\r",
									"            \"required\": [\"categoryIndex\", \"searchString\", \"subcategoryIndex\", \"uId\"]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"sortPagination\", \"terms\"]\r",
									"};\r",
									"\r",
									"let requestBody = {};\r",
									"try {\r",
									"    // Check if the request body exists and is raw\r",
									"    if (pm.request.body && pm.request.body.raw) {\r",
									"        requestBody = JSON.parse(pm.request.body.raw);\r",
									"    }\r",
									"} catch (error) {\r",
									"    console.log(\"❌ Error parsing request body:\", error);\r",
									"}\r",
									"\r",
									"requestBody;\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"sortPagination\": {\r\n    \"limit\": \"9\",\r\n    \"offset\": \"7\"\r\n  },\r\n  \"terms\": {\r\n    \"categoryIndex\": null,\r\n    \"searchString\": \"QA\",\r\n    \"subcategoryIndex\": null,\r\n    \"uId\": null\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl3}}/listing/listing/searchListings",
							"host": [
								"{{baseurl3}}"
							],
							"path": [
								"listing",
								"listing",
								"searchListings"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetService CategoryCount Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"var responseSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"categoryId\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"subcategoryId\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"count\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\"categoryId\", \"subcategoryId\", \"count\"]\r",
									"            }\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"};\r",
									"\r",
									"\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(responseSchema);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.success).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"terms\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"searchString\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"categoryIndex\": { \"type\": \"null\" },\r",
									"                \r",
									"                \"subcategoryIndex\": { \"type\": \"null\" },\r",
									"                \"uId\": { \"type\": \"null\" }\r",
									"            },\r",
									"            \"required\": [\"searchString\", \"categoryIndex\", \"subcategoryIndex\", \"uId\"]\r",
									"        },\r",
									"        \"sortPagination\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \r",
									"                \"offset\": {\r",
									"                    \"type\": \"integer\"\r",
									"                }, \r",
									"                \"limit\": {\r",
									"                    \"type\": \"integer\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\"offset\", \"limit\"]\r",
									"        }        \r",
									"    },\r",
									"    \"required\": [\"terms\", \"sortPagination\"]\r",
									"};\r",
									"\r",
									"let requestBody = {};\r",
									"try {\r",
									"    // Check if the request body exists and is raw\r",
									"    if (pm.request.body && pm.request.body.raw) {\r",
									"        requestBody = JSON.parse(pm.request.body.raw);\r",
									"    }\r",
									"} catch (error) {\r",
									"    console.log(\"❌ Error parsing request body:\", error);\r",
									"}\r",
									"\r",
									"requestBody;\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"terms\": {\r\n        \"searchString\": \"QA\",\r\n        \"categoryIndex\": null,\r\n        \"subcategoryIndex\": null,\r\n        \"uId\": null\r\n    },\r\n    \"sortPagination\": {\r\n        \"offset\": 54,\r\n        \"limit\": 9\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl3}}/listing/listing/GetServiceCategoryCount",
							"host": [
								"{{baseurl3}}"
							],
							"path": [
								"listing",
								"listing",
								"GetServiceCategoryCount"
							]
						}
					},
					"response": []
				},
				{
					"name": "SendTradeRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"var responseSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"success\": { \"type\": \"boolean\" },\r",
									"        \"id\": { \"type\": \"string\", \"pattern\": \"^[a-f0-9]{24}$\" }\r",
									"        \r",
									"    },\r",
									"    \"required\": [\"success\",\"id\" ]\r",
									"};\r",
									"\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(responseSchema);\r",
									"});\r",
									"\r",
									"if (jsonData.success) {\r",
									"    // Save the id to an environment variable\r",
									"    pm.environment.set(\"id\", jsonData.id);\r",
									"} else {\r",
									"    console.log(\"Request failed, no ID to save.\");\r",
									"}\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.success).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"ListingId\": { \"type\": \"string\" },\r",
									"        \"Message\": { \"type\": \"string\" },\r",
									"        \"TotalAmount\": { \"type\": \"integer\" },\r",
									"        \"TotalHours\": { \"type\": \"integer\" },\r",
									"        \r",
									"    },\r",
									"    \"required\": [\r",
									"        \"ListingId\", \"Message\", \"TotalAmount\", \"TotalHours\"\r",
									"    ]\r",
									"};\r",
									"let requestBody = {};\r",
									"try {\r",
									"    requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"} catch (error) {\r",
									"    console.log(\"❌ Error parsing request body:\", error);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ListingId\": \"{{id}}\",\r\n  \"Message\": \"test\",\r\n  \"TotalAmount\": 0,\r\n  \"TotalHours\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl3}}/listing/listing/sendTradeRequest",
							"host": [
								"{{baseurl3}}"
							],
							"path": [
								"listing",
								"listing",
								"sendTradeRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login as Receiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"isSuccess\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"token\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"token\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"expires\": {\r",
									"          \"type\": \"number\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"token\",\r",
									"        \"expires\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"isSuccess\",\r",
									"    \"token\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"if (jsonData.isSuccess) {\r",
									"    // Save the token to an environment variable\r",
									"    pm.environment.set(\"token\", jsonData.token.token);\r",
									"} else {\r",
									"    console.log(\"Login failed, no token to save.\");\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.isSuccess).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"const requestSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"rememberMe\": { \"type\": \"boolean\" },\r",
									"        \"email\": { \"type\": \"string\" },\r",
									"        \"password\": { \"type\": \"string\"}\r",
									"    },\r",
									"    \"required\": [ \"rememberMe\",\"email\",\"password\"]\r",
									"};\r",
									"\r",
									"const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"\r",
									"const validate = ajv.compile(requestSchema);\r",
									"const valid = validate(requestBody);\r",
									"\r",
									"if (!valid) {\r",
									"    console.log(\"❌ Request JSON Schema Validation Failed:\", validate.errors);\r",
									"    throw new Error(\"Request JSON Schema Validation Failed\");\r",
									"} else {\r",
									"    console.log(\"✅ Request JSON Schema Validation Passed\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rememberMe\": false,\r\n    \"email\": \"{{username}}\",\r\n    \"password\": \"Qwerfdsa1@\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/authentication/authentication/signin",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"authentication",
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateReceivedRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"var responseSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"success\": { \"type\": \"boolean\" }        \r",
									"    },\r",
									"    \"required\": [\"success\" ]\r",
									"};\r",
									"\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(responseSchema);\r",
									"});\r",
									"\r",
									"if (jsonData.success) {\r",
									"    // Save the id to an environment variable\r",
									"    pm.environment.set(\"id\", jsonData.id);\r",
									"} else {\r",
									"    console.log(\"Request failed, no ID to save.\");\r",
									"}\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.success).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"Id\": { \"type\": \"integer\" },\r",
									"        \"Status\": { \"type\": \"string\" }\r",
									"    },\r",
									"    \"required\": [\"ID\", \"Status\" ]\r",
									"};\r",
									"\r",
									"let requestBody = {};\r",
									"try {\r",
									"    requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"} catch (error) {\r",
									"    console.log(\"❌ Error parsing request body:\", error);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Id\": \"{{id}}\",\r\n  \"Status\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl3}}/listing/listing/updateReceivedRequest",
							"host": [
								"{{baseurl3}}"
							],
							"path": [
								"listing",
								"listing",
								"updateReceivedRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get TradeRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"var responseSchema = {\r",
									"    \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"          \"id\": {\r",
									"            \"type\": \"string\",\r",
									"            \"pattern\": \"^[a-f0-9]{24}$\"\r",
									"          },\r",
									"          \"senderId\": {\r",
									"            \"type\": \"string\",\r",
									"            \"pattern\": \"^[a-f0-9]{24}$\"\r",
									"          },\r",
									"          \"senderName\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"recipientId\": {\r",
									"            \"type\": \"string\",\r",
									"            \"pattern\": \"^[a-f0-9]{24}$\"\r",
									"          },\r",
									"          \"recipientName\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"listingId\": {\r",
									"            \"type\": \"string\",\r",
									"            \"pattern\": \"^[a-f0-9]{24}$\"\r",
									"          },\r",
									"          \"totalHours\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"totalAmount\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"status\": {\r",
									"            \"type\": \"integer\"\r",
									"          },\r",
									"          \"isViewed\": {\r",
									"            \"type\": \"boolean\"\r",
									"          },\r",
									"          \"isCompletedBySender\": {\r",
									"            \"type\": \"boolean\"\r",
									"          },\r",
									"          \"isCompletedBySeller\": {\r",
									"            \"type\": \"boolean\"\r",
									"          },\r",
									"          \"category\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"categoryId\": {\r",
									"            \"type\": \"integer\"\r",
									"          },\r",
									"          \"title\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"message\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"senderLastName\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"senderCity\": {\r",
									"            \"type\": [\"string\", \"null\"]\r",
									"          },\r",
									"          \"senderCountry\": {\r",
									"            \"type\": [\"string\", \"null\"]\r",
									"          },\r",
									"          \"createdOn\": {\r",
									"            \"type\": \"string\",\r",
									"            \"format\": \"date-time\"\r",
									"          },\r",
									"          \"updatedOn\": {\r",
									"            \"type\": \"string\",\r",
									"            \"format\": \"date-time\"\r",
									"          },\r",
									"          \"isTradable\": {\r",
									"            \"type\": \"boolean\"\r",
									"          }\r",
									"        },\r",
									"        \"required\": [\r",
									"          \"id\",\r",
									"          \"senderId\",\r",
									"          \"senderName\",\r",
									"          \"recipientId\",\r",
									"          \"recipientName\",\r",
									"          \"listingId\",\r",
									"          \"totalHours\",\r",
									"          \"totalAmount\",\r",
									"          \"status\",\r",
									"          \"isViewed\",\r",
									"          \"isCompletedBySender\",\r",
									"          \"isCompletedBySeller\",\r",
									"          \"category\",\r",
									"          \"categoryId\",\r",
									"          \"title\",\r",
									"          \"message\",\r",
									"          \"senderLastName\",\r",
									"          \"senderCity\",\r",
									"          \"senderCountry\",\r",
									"          \"createdOn\",\r",
									"          \"updatedOn\",\r",
									"          \"isTradable\"\r",
									"        ]\r",
									"      }\r",
									"    },\r",
									"    \"totalCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"success\", \"data\", \"totalCount\"]\r",
									"};\r",
									"\r",
									"// Validate JSON Schema\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(responseSchema);\r",
									"});\r",
									"\r",
									"if (jsonData.success) {\r",
									"    // Save the id to an environment variable\r",
									"    pm.environment.set(\"id\", jsonData.id);\r",
									"} else {\r",
									"    console.log(\"Request failed, no ID to save.\");\r",
									"}\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.success).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"direction\": { \"type\": \"string\" },\r",
									"        \"limit\": { \"type\": \"integer\" },\r",
									"        \"offset\": { \"type\": \"integer\" },\r",
									"        \"sortBy\": { \"type\": \"string\" },\r",
									"        \r",
									"    },\r",
									"    \"required\": [\r",
									"        \"direction\", \"limit\", \"offset\", \"sortBy\"\r",
									"    ]\r",
									"};\r",
									"let requestBody = {};\r",
									"try {\r",
									"    requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"} catch (error) {\r",
									"    console.log(\"❌ Error parsing request body:\", error);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"direction\": \"descending\",\r\n  \"limit\": 3,\r\n  \"offset\": 0,\r\n  \"sortBy\": \"createdOn\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl3}}/listing/listing/getTradeRequests",
							"host": [
								"{{baseurl3}}"
							],
							"path": [
								"listing",
								"listing",
								"getTradeRequests"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Test",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"isSuccess\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"token\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"token\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"expires\": {\r",
									"          \"type\": \"number\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"token\",\r",
									"        \"expires\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"isSuccess\",\r",
									"    \"token\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"if (jsonData.isSuccess) {\r",
									"    // Save the token to an environment variable\r",
									"    pm.environment.set(\"token\", jsonData.token.token);\r",
									"} else {\r",
									"    console.log(\"Login failed, no token to save.\");\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    pm.expect(jsonData.isSuccess).to.be.true;\r",
									"    console.log(jsonData.message);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"const requestSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"rememberMe\": { \"type\": \"boolean\" },\r",
									"        \"email\": { \"type\": \"string\" },\r",
									"        \"password\": { \"type\": \"string\"}\r",
									"    },\r",
									"    \"required\": [ \"rememberMe\",\"email\",\"password\"]\r",
									"};\r",
									"\r",
									"const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"\r",
									"const validate = ajv.compile(requestSchema);\r",
									"const valid = validate(requestBody);\r",
									"\r",
									"if (!valid) {\r",
									"    console.log(\"❌ Request JSON Schema Validation Failed:\", validate.errors);\r",
									"    throw new Error(\"Request JSON Schema Validation Failed\");\r",
									"} else {\r",
									"    console.log(\"✅ Request JSON Schema Validation Passed\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rememberMe\": false,\r\n    \"email\": \"{{username}}\",\r\n    \"password\": \"Qwerfdsa1@\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/authentication/authentication/signin",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"authentication",
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Listing with invalid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"var responseSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"success\": { \"type\": \"boolean\" },\r",
									"        \"id\": { \"type\": \"string\", \"pattern\": \"^[a-f0-9]{24}$\" },\r",
									"        \"editFlag\": { \"type\": \"boolean\" }\r",
									"        \r",
									"    },\r",
									"    \"required\": [\"success\",\"id\",\"editFlag\" ]\r",
									"};\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(responseSchema);\r",
									"});\r",
									"\r",
									"if (jsonData.success) {\r",
									"    // Save the id to an environment variable\r",
									"    pm.environment.set(\"id\", jsonData.id);\r",
									"} else {\r",
									"    console.log(\"Request failed, no ID to save.\");\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Check if success is false\", function () {\r",
									"    pm.expect(jsonData.success).to.be.false;\r",
									"    console.log(jsonData.message);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"title\": { \"type\": \"string\" },\r",
									"        \"description\": { \"type\": \"string\" },\r",
									"        \"categoryId\": { \"type\": \"string\" },\r",
									"        \"subcategoryId\": { \"type\": \"string\" },\r",
									"        \"tags\": { \r",
									"            \"type\": \"array\", \r",
									"            \"items\": { \r",
									"                \"type\": \"object\", \r",
									"                \"properties\": { \r",
									"                    \"id\": { \"type\": \"string\" }, \r",
									"                    \"text\": { \"type\": \"string\" } \r",
									"                }, \r",
									"                \"required\": [\"id\", \"text\"] \r",
									"            } \r",
									"        },\r",
									"        \"serviceType\": { \"type\": \"integer\" },\r",
									"        \"locationType\": { \"type\": \"integer\" },\r",
									"        \"availability\": { \r",
									"            \"type\": \"object\", \r",
									"            \"properties\": { \r",
									"                \"startDate\": { \"type\": \"string\" },\r",
									"                \"endDate\": { \"type\": \"string\" },\r",
									"                \"dayEntries\": { \r",
									"                    \"type\": \"array\", \r",
									"                    \"items\": { \r",
									"                        \"type\": \"object\", \r",
									"                        \"properties\": { \r",
									"                            \"StartTime\": { \"type\": \"string\" }, \r",
									"                            \"EndTime\": { \"type\": \"string\" }, \r",
									"                            \"Available\": { \"type\": \"boolean\" } \r",
									"                        }, \r",
									"                        \"required\": [\"StartTime\", \"EndTime\", \"Available\"] \r",
									"                    } \r",
									"                } \r",
									"            }, \r",
									"            \"required\": [\"startDate\", \"endDate\", \"dayEntries\"] \r",
									"        },\r",
									"        \"skillTrade\": { \r",
									"            \"type\": \"array\", \r",
									"            \"items\": { \r",
									"                \"type\": \"object\", \r",
									"                \"properties\": { \r",
									"                    \"id\": { \"type\": \"string\" }, \r",
									"                    \"text\": { \"type\": \"string\" } \r",
									"                }, \r",
									"                \"required\": [\"id\", \"text\"] \r",
									"            } \r",
									"        },\r",
									"        \"isTradable\": { \"type\": \"boolean\" },\r",
									"        \"charge\": { \"type\": \"integer\" },\r",
									"        \"credentials\": { \"type\": \"boolean\" },\r",
									"        \"isActive\": { \"type\": \"boolean\" }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"title\", \"description\", \"categoryId\", \"subcategoryId\", \"tags\", \"serviceType\",\r",
									"        \"locationType\", \"availability\", \"skillTrade\", \"isTradable\", \"charge\", \r",
									"        \"credentials\", \"isActive\"\r",
									"    ]\r",
									"};\r",
									"let requestBody = {};\r",
									"try {\r",
									"    requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"} catch (error) {\r",
									"    console.log(\"❌ Error parsing request body:\", error);\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"QA\",\r\n    \"description\": \"Test\",\r\n    \"categoryId\": \"hjh\",\r\n    \"subcategoryId\": \"hjhj\",\r\n    \"tags\": [\r\n        {\r\n            \"id\": \"QA\",\r\n            \"text\": \"QA\"\r\n        }\r\n    ],\r\n    \"serviceType\": 8,\r\n    \"locationType\": 1,\r\n    \"availability\": {\r\n        \"startDate\": \"2024-12-04\",\r\n        \"endDate\": \"\",\r\n        \"dayEntries\": [\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            }\r\n        ]\r\n    },\r\n    \"skillTrade\": [\r\n        {\r\n            \"id\": \"QA\",\r\n            \"text\": \"QA\"\r\n        }\r\n    ],\r\n    \"isTradable\": true,\r\n    \"charge\": 0,\r\n    \"credentials\": true,\r\n    \"isActive\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl3}}/listing/listing/addListing",
							"host": [
								"{{baseurl3}}"
							],
							"path": [
								"listing",
								"listing",
								"addListing"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}